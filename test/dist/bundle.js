!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=new(n(1).default)(document.querySelector(".typer-js-container"),{text:"\n\tThis is like one of those scenes in a futuristic sci-fi movie where someone is communicating with the main character through an ominous computer screen. And the person is completely unaware of the context or meaning of the message, but then later finds out it was destined to be. \n\t\n\tLike how awesome would it be if I just did something like...\n\n\tMark. You are the chosen one.\n\n\tMeet @ Starbucks later tho?\n\n\tNah just kidding, (sorry if your name is Mark). Anyway, hope you enjoy tinkering around with this!\n\n\t",showCaret:!0,caretType:"normal"});i.line("Cared season.").then((function(){i.line("Ooof.")}))},function(t,e,n){"use strict";var i=this&&this.__assign||function(){return(i=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)},r=this&&this.__awaiter||function(t,e,n,i){return new(n||(n=Promise))((function(r,o){function s(t){try{a(i.next(t))}catch(t){o(t)}}function u(t){try{a(i.throw(t))}catch(t){o(t)}}function a(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}a((i=i.apply(t,e||[])).next())}))},o=this&&this.__generator||function(t,e){var n,i,r,o,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(r=s.trys,(r=r.length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){s.label=o[1];break}if(6===o[0]&&s.label<r[1]){s.label=r[1],r=o;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(o);break}r[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}};Object.defineProperty(e,"__esModule",{value:!0});var s=n(2),u=s.setIntervalAsync,a=s.clearIntervalAsync,c=function(t,e){var n=this;this.options={text:"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus tempus sagittis dapibus. Fusce lacinia dui tortor, at porttitor quam luctus ut. Aliquam gravida commodo eros ac dictum. Nam ac odio at sem interdum dictum eget sit amet lorem. Vivamus enim velit, condimentum sed neque non, dignissim viverra nulla. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Duis sodales, neque eget tincidunt efficitur, nisi orci vestibulum diam, eget fringilla dui dolor sed nisi. Pellentesque feugiat augue in felis interdum, non tempus dui volutpat. Sed pulvinar, massa non placerat scelerisque, nunc tellus posuere felis, a ultricies mi libero id velit. Mauris sed arcu dolor. Mauris varius a metus sit amet pulvinar. Proin rhoncus non quam in vulputate. ",hesitation:.45,wordsPerMinute:40,pauseTimeout:525,pauseOnSpace:!1,pauseOnEndOfSentence:!0,showCaret:!1,caretType:"normal",glitch:!1,onFinishedTyping:function(){console.log("Finished typing!")}},this.currentIndex=0,this.typingListener={finishedTyping:!1,finishedTypingListener:function(t){},get isFinishedTyping(){return this.finishedTyping},set isFinishedTyping(t){this.finishedTyping=t,this.finishedTypingListener(t)},registerListener:function(t){this.finishedTypingListener=t}},this.trim=function(t){return t.trim()},this.getTypingSpeed=function(){return n.currentText.length/(4.7*n.options.wordsPerMinute)+10},this.getCaretCharacter=function(){return"normal"===n.options.caretType?"▮":"_"},this.setCurrentText=function(t){n.currentText=t,n.currentIndex=0,console.log("Setting current text to:",t)},this.getCurrentText=function(){return n.currentText},this.getTextByRange=function(t,e){return n.getCurrentText().substring(t,e)},this.getCaretLength=function(){return n.options.showCaret?1:0},this.sourceTextIsTargetLength=function(){var t=n.getCaretLength(),e=n.container.textContent.length-t,i=n.currentText.length-1;return console.log("Current text length vs actual container text length:",i,e),e==i},this.observeTyping=function(){return new Promise((function(t,e){n.typingListener.registerListener((function(e){e&&t()}))}))},this.updateElementText=function(t){var e=n.container.textContent,i=n.getCaretLength(),r=e.length-i,o=n.getTextByRange(0,r)+t,s=n.options.showCaret?n.getCaretCharacter():"";n.container.textContent=o+s},this.stopTyping=function(){return a(n.typingInterval)},this.pauseTyping=function(t){return r(n,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return e=void 0!==t?t:this.options.pauseTimeout,this.stopTyping(),[4,this.delay(e)];case 1:return n.sent(),this.beginTyping(),[2]}}))}))},this.delay=function(t){return new Promise((function(e){setTimeout(e,t)}))},this.applyVariation=function(){return r(n,void 0,void 0,(function(){var t;return o(this,(function(e){switch(e.label){case 0:return t=Math.floor(this.options.hesitation*Math.random()*this.getRandomArbitrary(100,500)),[4,this.delay(t)];case 1:return e.sent(),[2]}}))}))},this.getCharAt=function(t){return n.currentText.charAt(t)},this.isEndOfSentence=function(t,e){return t.match(/[\.\?\!]/g)&&!e.match(/[\.\?\!]/g)||t.match(/\\n/g)},this.getShouldPause=function(t,e){var i=t.match(/\s/g),r=n.isEndOfSentence(t,e);return n.options.pauseOnSpace&&i||n.options.pauseOnEndOfSentence&&r},this.insertCurrentChar=function(){return r(n,void 0,void 0,(function(){var t,e,n,i;return o(this,(function(r){switch(r.label){case 0:return t=this.getCharAt(this.currentIndex),e=this.getCharAt(this.currentIndex+1),n=this.getShouldPause(t,e),i=this.sourceTextIsTargetLength(),this.updateElementText(t),this.options.hesitation?[4,this.applyVariation()]:[3,2];case 1:r.sent(),r.label=2;case 2:return i?(this.options.onFinishedTyping&&this.options.onFinishedTyping(),this.typingListener.isFinishedTyping=!0,[4,this.stopTyping()]):[3,4];case 3:return r.sent(),[3,6];case 4:return this.currentIndex+=1,n?[4,this.pauseTyping()]:[3,6];case 5:r.sent(),r.label=6;case 6:return[2]}}))}))},this.getRandomArbitrary=function(t,e){return Math.random()*(e-t)+t},this.setElementText=function(t){n.container.textContent=t},this.resetElementText=function(){n.setElementText("")},this.applyGlitch=function(){return r(n,void 0,void 0,(function(){var t,e,n,i,r;return o(this,(function(o){switch(o.label){case 0:return t=this.container.textContent,e=this.getRandomArbitrary(1,t.length),n=t.substring(0,e),i=t.substring(e,t.length),r=n+"▮ "+i,this.setElementText(r),[4,this.delay(this.options.hesitation*this.getRandomArbitrary(100,200))];case 1:return o.sent(),this.setElementText(""+n+i),[2]}}))}))},this.beginTyping=function(t,e){return r(n,void 0,void 0,(function(){var n,i;return o(this,(function(r){switch(r.label){case 0:return n=this.getTypingSpeed(),i=t||this.options.text,e&&this.resetElementText(),this.setCurrentText(i),this.typingListener.isFinishedTyping=!1,this.typingInterval=u(this.insertCurrentChar,n),this.options.glitch&&(this.glitchInterval=u(this.applyGlitch,5e3)),console.log("Beginning to type at "+this.options.wordsPerMinute+" words per minute."),console.log("Typing interval is:",n),[4,this.observeTyping()];case 1:return r.sent(),[2]}}))}))},this.line=function(t){return n.beginTyping(t)},this.container=t,e&&(this.options=i(i({},this.options),e)),this.options.text=this.trim(this.options.text),this.setCurrentText(this.options.text)};window.Tiper=c,e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i,r=(i=n(3))&&"object"==typeof i&&"default"in i?i.default:i;const o=Math.pow(2,31)-1;function s(){return(s=r((function*(t){t.stopped=!0;for(var e=0,n=Object.values(t.timeouts);e<n.length;e++){const t=n[e];clearTimeout(t)}const i=()=>{},r=Object.values(t.promises).map(t=>{t.catch(i)}),s=setInterval(i,o);yield Promise.all(r),clearInterval(s)}))).apply(this,arguments)}class u extends Error{}Object.defineProperty(u.prototype,"name",{value:"SetIntervalAsyncError"});class a{constructor(){this.stopped=!1,this.id=0,this.timeouts={},this.promises={}}}function c(t,e,n,...i){const o=t.id;t.promises[o]=r((function*(){const r=new Date;try{yield e(...i)}catch(t){console.error(t)}const s=new Date;if(!t.stopped){const u=s-r,a=n>u?n-u:0;t.timeouts[o+1]=setTimeout(c,a,t,e,n,...i)}delete t.timeouts[o],delete t.promises[o]}))(),t.id=o+1}e.SetIntervalAsyncError=u,e.clearIntervalAsync=function(t){return s.apply(this,arguments)},e.setIntervalAsync=function(t,e,...n){!function(t){if("function"!=typeof t)throw new u('Invalid argument: "handler". Expected a function.')}(t),function(t){if(!("number"==typeof t&&10<=t))throw new u('Invalid argument: "interval". Expected a number greater than or equal to 10.')}(e);const i=new a,r=i.id;return i.timeouts[r]=setTimeout(c,e,i,t,e,...n),i}},function(t,e){function n(t,e,n,i,r,o,s){try{var u=t[o](s),a=u.value}catch(t){return void n(t)}u.done?e(a):Promise.resolve(a).then(i,r)}t.exports=function(t){return function(){var e=this,i=arguments;return new Promise((function(r,o){var s=t.apply(e,i);function u(t){n(s,r,o,u,a,"next",t)}function a(t){n(s,r,o,u,a,"throw",t)}u(void 0)}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,